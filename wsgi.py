#!/usr/bin/env python3
"""
WSGI entry point para produ√ß√£o no Render
"""

import os
import sys
import logging

# Configurar logging b√°sico
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Adicionar diret√≥rio atual ao path
sys.path.insert(0, os.path.dirname(__file__))

# Configurar ambiente para produ√ß√£o
os.environ.setdefault('FLASK_ENV', 'production')

# Verificar se DATABASE_URL est√° configurada
if not os.environ.get('DATABASE_URL'):
    logger.warning("DATABASE_URL n√£o configurada, usando SQLite em mem√≥ria")

try:
    # Tentar importar e criar app
    from app import create_app
    app = create_app('production')
    logger.info("‚úÖ Aplica√ß√£o criada com sucesso")
    
except ImportError as e:
    logger.error(f"‚ùå Erro de import: {e}")
    # Fallback mais simples
    try:
        from flask import Flask
        app = Flask(__name__)
        
        @app.route('/')
        def hello():
            return "WEBAG est√° inicializando... Verifique os logs."
            
        @app.route('/health')
        def health():
            return {"status": "ok", "message": "Aplica√ß√£o rodando com fallback"}
            
        logger.info("‚ö†Ô∏è Usando aplica√ß√£o de fallback")
    except Exception as e2:
        logger.error(f"‚ùå Erro cr√≠tico: {e2}")
        raise

except Exception as e:
    logger.error(f"‚ùå Erro na cria√ß√£o da aplica√ß√£o: {e}")
    raise

# Configura√ß√£o para Render
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    logger.info(f"üöÄ Iniciando servidor na porta {port}")
    app.run(host='0.0.0.0', port=port, debug=False) 