#!/usr/bin/env python3
"""
WSGI entry point para produ√ß√£o no Render
"""

import os
import sys
import logging

# Configurar logging b√°sico
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Adicionar diret√≥rio atual ao path
sys.path.insert(0, os.path.dirname(__file__))

# Configurar ambiente para produ√ß√£o
os.environ.setdefault('FLASK_ENV', 'production')

# Verificar se DATABASE_URL est√° configurada
if not os.environ.get('DATABASE_URL'):
    logger.warning("DATABASE_URL n√£o configurada, usando SQLite em mem√≥ria")

try:
    # Tentar aplica√ß√£o principal garantida
    from main_app import app
    logger.info("‚úÖ Aplica√ß√£o principal (main_app.py) carregada com sucesso")
    
except Exception as e:
    logger.warning(f"‚ö†Ô∏è Aplica√ß√£o completa falhou: {e}")
    try:
        # Tentar vers√£o simplificada
        from app_simple import create_simple_app
        app = create_simple_app()
        logger.info("‚úÖ Aplica√ß√£o simplificada criada com sucesso")
    except Exception as e2:
        logger.warning(f"‚ö†Ô∏è Aplica√ß√£o simplificada falhou: {e2}")
        try:
            # Tentar vers√£o m√≠nima (sem SQLAlchemy)
            from app_minimal import create_minimal_app
            app = create_minimal_app()
            logger.info("‚úÖ Aplica√ß√£o m√≠nima criada com sucesso")
        except Exception as e3:
            logger.error(f"‚ùå Todas as vers√µes falharam: {e} | {e2} | {e3}")
            raise Exception(f"Todas as vers√µes falharam")
    
except ImportError as e:
    logger.error(f"‚ùå Erro de import: {e}")
    # Fallback mais informativo
    try:
        from flask import Flask, jsonify
        app = Flask(__name__)
        
        @app.route('/')
        def hello():
            return f"""
            <h1>üöÄ WEBAG Professional</h1>
            <p><strong>Status:</strong> Inicializando com fallback</p>
            <p><strong>Erro:</strong> {str(e)}</p>
            <p><strong>Solu√ß√£o:</strong> Verificando configura√ß√µes...</p>
            <hr>
            <h3>Informa√ß√µes do Sistema:</h3>
            <ul>
                <li>DATABASE_URL: {'‚úÖ Configurada' if os.environ.get('DATABASE_URL') else '‚ùå N√£o configurada'}</li>
                <li>SECRET_KEY: {'‚úÖ Configurada' if os.environ.get('SECRET_KEY') else '‚ùå N√£o configurada'}</li>
                <li>FLASK_ENV: {os.environ.get('FLASK_ENV', 'N√£o definida')}</li>
            </ul>
            <p><a href="/health">Verificar Health Check</a></p>
            <p><a href="/debug">Informa√ß√µes de Debug</a></p>
            """
            
        @app.route('/health')
        def health():
            return jsonify({
                "status": "fallback", 
                "message": "Aplica√ß√£o rodando com fallback",
                "error": str(e),
                "env_vars": {
                    "DATABASE_URL": "configured" if os.environ.get('DATABASE_URL') else "missing",
                    "SECRET_KEY": "configured" if os.environ.get('SECRET_KEY') else "missing",
                    "FLASK_ENV": os.environ.get('FLASK_ENV', "not_set")
                }
            })
            
        @app.route('/debug')
        def debug():
            import sys
            return jsonify({
                "python_version": sys.version,
                "path": sys.path[:5],  # Primeiros 5 paths
                "environment": dict(os.environ),
                "error": str(e)
            })
            
        logger.info("‚ö†Ô∏è Usando aplica√ß√£o de fallback com debug")
    except Exception as e2:
        logger.error(f"‚ùå Erro cr√≠tico no fallback: {e2}")
        raise

except Exception as e:
    logger.error(f"‚ùå Erro na cria√ß√£o da aplica√ß√£o: {e}")
    raise

# Configura√ß√£o para Render
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    logger.info(f"üöÄ Iniciando servidor na porta {port}")
    app.run(host='0.0.0.0', port=port, debug=False) 